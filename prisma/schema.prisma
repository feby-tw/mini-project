// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id	              Int		              @id @default(autoincrement())
  username	        String		          @unique
  email	            String		          @unique
  roleId	          Int
  role	            Role		            @relation(fields: [roleId], references: [id])
  password	        String
  referral	        String		          @unique
  points	          Int		              @default(0)
  isVerified        Boolean             @default(false)
  registrationDate	DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  referees          ReferralHistory[]
  events            Event[]
  transactions      Transaction[]
  reviews           Review[]
}

model Role {
  id	              Int                 @id @default(autoincrement())
  roleName	        String
  users             User[]
}

model ReferralHistory {
  id	              Int		              @id @default(autoincrement())
  referralCode	    String
  referrerId        Int
  pointsEarned	    Int
  pointsUsed        Int                 @default(0)
  refereeId	        Int
  referee	          User		            @relation(fields: [refereeId], references: [id])
  voucherCode	      String              @unique
  discountValue	    Int
  voucherUsed	      Boolean             @default(false)
  isExpired         Boolean             @default(false)
  validFrom	        DateTime            @default(now())
  validTo	          DateTime
}

model Category {
  id                Int                 @id @default(autoincrement())
  categoryName      String
  events            Event[]
}

model EventType {
  id                Int                 @id @default(autoincrement())
  eventType         String
  events            Event[]
}

model Event {
  id                Int                 @id @default(autoincrement())
  eventName         String
  organizerId       Int
  organizer         User                @relation(fields: [organizerId], references: [id])
  categoryId        Int
  category          Category		        @relation(fields: [categoryId], references: [id])
  eventTypeId       Int
  eventType         EventType		        @relation(fields: [eventTypeId], references: [id])
  availableSeat     Int		              @default(0)
  description       String?
  isEnded           Boolean             @default(false)
  createdAt         DateTime		        @default(now())
  updatedAt         DateTime		        @updatedAt
  locations         Location[]
  schedules         Schedule[]
  pictures          Picture[]
  promotions        Promotion[]
  tickets           Ticket[]
  transactions      Transaction[]
  reviews           Review[]
}

model Location {
  id	              Int		              @id @default(autoincrement())
  eventId	          Int
  event	            Event		            @relation(fields: [eventId], references: [id])
  country	          String
  city	            String
  address	          String?
  postalCode	      Int?
  updatedAt	        DateTime		        @updatedAt
}

model Schedule {
  id	              Int		              @id @default(autoincrement())
  eventId	          Int
  event	            Event		            @relation(fields: [eventId], references: [id])
  startTime	        DateTime
  endTime	          DateTime
  description	      String?
  updatedAt	        DateTime		        @updatedAt
}

model Picture {
  id	              Int		              @id @default(autoincrement())
  eventId	          Int
  event	            Event		            @relation(fields: [eventId], references: [id])
  title	            String?
  picture	          Bytes
  description	      String?
  updatedAt	        DateTime		        @updatedAt
}

model Promotion {
  id	              Int		              @id @default(autoincrement())
  promotionName	    String?
  eventId	          Int
  event	            Event		            @relation(fields: [eventId], references: [id])
  discount	        Int
  limit	            Int
  isUsed            Int                 @default(0)
  validFrom	        DateTime
  validTo	          DateTime
  isInvalid         Boolean             @default(false)
  description	      String?
  createdAt	        DateTime		        @default(now())
  updatedAt	        DateTime		        @updatedAt
}

model TicketType {
  id	              Int		              @id @default(autoincrement())
  ticketType	      String
  tickets           Ticket[]
}

model Ticket {
  id	              Int         	      @id @default(autoincrement())
  ticketName	      String?
  eventId	          Int
  event	            Event		            @relation(fields: [eventId], references: [id])
  ticketTypeId	    Int?
  ticketType	      TicketType?	        @relation(fields: [ticketTypeId], references: [id])
  price	            Int
  availableSeat 	  Int
  openTime	        DateTime
  closeTime	        DateTime
  description	      String?
  isSoldOut         Boolean             @default(false)
  createdAt	        DateTime		        @default(now())
  updatedAt	        DateTime		        @updatedAt
  transactions      Transaction[]
}

model Transaction {
  id	              Int		              @id @default(autoincrement())
  attendeeId	      Int
  attendee	        User		            @relation(fields: [attendeeId], references: [id])
  eventId	          Int
  event	            Event		            @relation(fields: [eventId], references: [id])
  ticketId	        Int
  ticket	          Ticket		          @relation(fields: [ticketId], references: [id])
  quantity	        Int
  promotionId       Int?
  voucher           Int?
  pointsRedeemed	  Int?
  totalPrice	      Int                 @default(0)
  transactionDate	  DateTime		        @default(now())
  isCompleted       Boolean             @default(false)
}

model Review {
  id	              Int		              @id @default(autoincrement())
  attendeeId	      Int
  attendee	        User		            @relation(fields: [attendeeId], references: [id])
  eventId	          Int
  event	            Event		            @relation(fields: [eventId], references: [id])
  rating	          Int
  comment	          String?
  reviewDate	      DateTime		        @default(now())
}